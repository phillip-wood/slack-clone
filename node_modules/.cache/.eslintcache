[{"/home/phil/Workspace/slack-clone-challenge/src/index.js":"1","/home/phil/Workspace/slack-clone-challenge/src/App.js":"2","/home/phil/Workspace/slack-clone-challenge/src/reportWebVitals.js":"3","/home/phil/Workspace/slack-clone-challenge/src/components/Chat.js":"4","/home/phil/Workspace/slack-clone-challenge/src/components/Login.js":"5","/home/phil/Workspace/slack-clone-challenge/src/components/Header.js":"6","/home/phil/Workspace/slack-clone-challenge/src/components/Sidebar.js":"7","/home/phil/Workspace/slack-clone-challenge/src/data/SidebarData.js":"8","/home/phil/Workspace/slack-clone-challenge/src/firebase.js":"9","/home/phil/Workspace/slack-clone-challenge/src/components/ChatInput.js":"10","/home/phil/Workspace/slack-clone-challenge/src/components/ChatMessage.js":"11"},{"size":500,"mtime":1614196460167,"results":"12","hashOfConfig":"13"},{"size":1557,"mtime":1614297950253,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1614196460167,"results":"15","hashOfConfig":"13"},{"size":3384,"mtime":1614297850656,"results":"16","hashOfConfig":"13"},{"size":5739,"mtime":1614285391767,"results":"17","hashOfConfig":"13"},{"size":2167,"mtime":1614291591055,"results":"18","hashOfConfig":"13"},{"size":3419,"mtime":1614292090464,"results":"19","hashOfConfig":"13"},{"size":905,"mtime":1614207798181,"results":"20","hashOfConfig":"13"},{"size":592,"mtime":1614284106023,"results":"21","hashOfConfig":"13"},{"size":1839,"mtime":1614297759486,"results":"22","hashOfConfig":"13"},{"size":1234,"mtime":1614294305326,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1fxrtka",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"/home/phil/Workspace/slack-clone-challenge/src/index.js",[],["50","51"],"/home/phil/Workspace/slack-clone-challenge/src/App.js",["52"],"/home/phil/Workspace/slack-clone-challenge/src/reportWebVitals.js",[],"/home/phil/Workspace/slack-clone-challenge/src/components/Chat.js",["53"],"/home/phil/Workspace/slack-clone-challenge/src/components/Login.js",[],"/home/phil/Workspace/slack-clone-challenge/src/components/Header.js",["54"],"import React from 'react'\nimport styled from 'styled-components'\nimport AccessTimeIcon from '@material-ui/icons/AccessTime'\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline'\n\nfunction Header({ user, signOut }) {\n    return (\n        <Container>\n            <Main>\n                <AccessTimeIcon />\n                <SearchContainer>\n                    <Search>\n                        <input type=\"text\" placeholder=\"Search...\"/>\n                    </Search>\n                </SearchContainer>\n                <HelpOutlineIcon />\n\n            </Main>\n            <UserContainer>\n                <Name>\n                    {user.name}\n                </Name>\n                <UserImage onClick={signOut}>\n                    <img src={ user.photo ? user.photo : \"https://i.imgur.com/6VBx3io.png\" }></img>\n                </UserImage>\n            </UserContainer>\n        </Container>\n    )\n}\n\nexport default Header\n\nconst Container = styled.div`\n    background: #350d36;\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    z-index: 10;\n    box-shadow: 0 1px 0 0 rgb(255 255 255 / 10%);\n`\nconst Main = styled.div`\n    display: flex;\n    margin-left: 16px;\n    margin-right: 16px;\n`\nconst SearchContainer = styled.div`\n    min-width: 400px;\n    margin-left: 16px;\n    margin-right: 16px;\n`\nconst Search = styled.div`\n    box-shadow: inset 0 0 0 1px rgb(104 74 104);\n    width: 100%;\n    border-radius: 6px;\n    display: flex;\n    align-items: center;\n\n    input {\n        background-color: transparent;\n        border: none;\n        padding-left: 8px;\n        padding-right: 8px;\n        color: white;\n        padding-top: 4px;\n        padding-bottom: 4px;\n    }\n\n    input:focus {\n        outline: none;\n    }\n`\nconst UserContainer = styled.div`\n    display: flex;\n    align-items: center;\n    padding-right: 16px;\n    position: absolute;\n    right: 0;\n\n`\nconst Name = styled.div`\n    padding-right: 16px;\n\n`\nconst UserImage = styled.div`\n    width: 28px;\n    height: 28px;\n    border: 2px solid white;\n    border-raidius: 2px;\n    cursor: pointer;\n\n    img {\n        width: 100%;\n    }\n`\n","/home/phil/Workspace/slack-clone-challenge/src/components/Sidebar.js",["55"],"import React from 'react'\nimport styled from 'styled-components'\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline'\nimport AddIcon from '@material-ui/icons/Add'\nimport { useHistory } from 'react-router-dom'\n\nimport { sidebarItemsData, sidebarChannelsData } from '../data/SidebarData'\nimport db from '../firebase'\n\nfunction Sidebar( {rooms} ) {\n\n    const history = useHistory()\n\n    const goToChannel = (id) => {\n        if(id){\n            history.push(`/room/${id}`)\n        }\n    }\n\n\n    const addChannel = () => {\n        const promptName = prompt(\"Enter channel name\")\n        if(promptName){\n            db.collection('rooms').add({\n                name: promptName\n            })\n        }\n    }\n\n    return (\n        <Container>\n            <WorkspaceContainer>\n                <Name>\n                    CleverProgramming\n                </Name>\n                <NewMessage>\n                    <AddCircleOutlineIcon/>\n                </NewMessage>\n            </WorkspaceContainer>\n            <MainChannels>\n                {\n                    sidebarItemsData.map( item => (\n                        <MainChannelItem key={item.text}>\n                            {item.icon}\n                            {item.text}\n                        </MainChannelItem>\n                    ))\n                }\n            </MainChannels>\n            <ChannelsContainer>\n                <NewChannelContainer>\n                    <div>\n                        Channels\n                    </div>\n                    <AddIcon onClick={() => addChannel()} />\n                </NewChannelContainer>\n                <ChannelsList>\n                {\n                    rooms.map( room => (\n                        <Channel key={room.id} onClick={() => goToChannel(room.id)}>\n                            # {room.name}\n                        </Channel>\n                    ))\n                }\n                </ChannelsList>\n            </ChannelsContainer>\n        </Container>\n    )\n}\n\nexport default Sidebar\n\nconst Container = styled.div`\n    background: #350d36;\n\n`\nconst WorkspaceContainer = styled.div`\n    color: white;\n    height: 64px;\n    display: flex;\n    align-items: center;\n    padding-left: 19px;\n    padding-right: 12px;\n    justify-content: space-between;\n    border-bottom: 1px solid #532753;\n`\nconst Name = styled.div`\n\n`\nconst NewMessage = styled.div`\n    width: 36px;\n    height: 36px;\n    background: white;\n    color: #3F0E40;\n    fill: #3F0E40;\n    border-radius: 50%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n`\nconst MainChannels = styled.div`\n    padding-top: 20px;\n`\nconst MainChannelItem = styled.div`\n    color: rgb(188,171,188);\n    display: grid;\n    grid-template-columns: 15% auto;\n    height: 28px;\n    align-items: center;\n    padding-left: 19px;\n    cursor: pointer;\n    :hover {\n        background: white;\n    }\n\n`\nconst ChannelsContainer = styled.div`\n    color: rgb(188,171,188);\n    margin-top: 10px;\n\n`\nconst NewChannelContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 28px;\n    padding-left: 19px;\n    padding-right: 12px;\n`\nconst ChannelsList = styled.div`\n\n`\nconst Channel = styled.div`\n    height: 28x;\n    display: flex;\n    align-items: center;\n    padding-left: 19px;\n    cursor: pointer;\n    :hover {\n        background: white;\n    }\n`","/home/phil/Workspace/slack-clone-challenge/src/data/SidebarData.js",[],"/home/phil/Workspace/slack-clone-challenge/src/firebase.js",[],"/home/phil/Workspace/slack-clone-challenge/src/components/ChatInput.js",[],"/home/phil/Workspace/slack-clone-challenge/src/components/ChatMessage.js",["56"],"import React from 'react'\nimport styled from 'styled-components'\n\nfunction ChatMessage({ text, name, image, timeStamp }) {\n    return (\n        <Container>\n            <UserAvatar>\n                <img src={image}/>\n            </UserAvatar>\n            <MessageContent>\n                <Name>\n                    {name}\n                    <span>{ new Date(timeStamp.toDate()).toUTCString() }</span>\n                </Name>\n                <Text>\n                    {text}\n                </Text>\n            </MessageContent>\n        </Container>\n    )\n}\n\nexport default ChatMessage\n\nconst Container = styled.div`\n    padding: 8px 20px;\n    display: flex;\n    align-items: center;\n\n    :hover {\n        background: black;\n    }\n\n`\nconst UserAvatar = styled.div`\n    width: 36px;\n    height: 36px;\n    border-radius: 2px;\n    overflow: hidden;\n    margin-right: 8px;\n\n    img {\n        width:100%;\n    }\n`\nconst MessageContent = styled.div`\n    display:flex;\n    flex-direction: column;\n`\nconst Name = styled.div`\n    font-weight: 900;\n    font-size: 15px;\n    line-height: 1.4;\n    span {\n        font-weight: 400;\n        color: rgb(97,96,97);\n        margin-left: 8px;\n        font-size: 13px;\n    }\n`\nconst Text = styled.div`\n\n`",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":11,"column":16,"nodeType":"63","messageId":"64","endLine":11,"endColumn":24},{"ruleId":"65","severity":1,"message":"66","line":52,"column":8,"nodeType":"67","endLine":52,"endColumn":19,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":24,"column":21,"nodeType":"71","endLine":24,"endColumn":94},{"ruleId":"61","severity":1,"message":"72","line":7,"column":28,"nodeType":"63","messageId":"64","endLine":7,"endColumn":47},{"ruleId":"69","severity":1,"message":"70","line":8,"column":17,"nodeType":"71","endLine":8,"endColumn":35},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'provider' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getChannel' and 'getMessages'. Either include them or remove the dependency array.","ArrayExpression",["75"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'sidebarChannelsData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [channelId, getChannel, getMessages]",{"range":"78","text":"79"},[1442,1453],"[channelId, getChannel, getMessages]"]